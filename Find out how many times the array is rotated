Problem Statement:
Find out how many times the array is rotated-
Given an integer array nums of size n, sorted in ascending order with distinct values. The array has been right rotated an unknown number of times, between 0 and n-1 (including). Determine the number of rotations performed on the array.

Intuition

1.A rotated sorted array consists of two sorted halves.
2.If you look at any midpoint (mid), one side will always be sorted.
3.The smallest element lies in the unsorted half.
4.We can shrink the search space based on whether the mid lies in the sorted or unsorted part.

The trick:
  If nums[low] <= nums[mid], then the left part is sorted.
  So the smallest could be at nums[low], but not inside (because it’s sorted).
  Update lowest and move low = mid + 1.
  Otherwise, the right part is sorted, meaning the pivot (smallest element) must lie in the left half.
  Update lowest with nums[mid] and move high = mid - 1.
  Keep doing this until you shrink down to the minimum element.

Approach (Steps)

Initialize:
low = 0, high = n-1
lowest = INT_MAX, ind = 0

While low <= high:
Compute mid

If left half is sorted:
Compare nums[low] with lowest
Update index if smaller
Move to right half

Else:
Compare nums[mid] with lowest
Update index if smaller
Move to left half

Return ind

Time Complexity
Each iteration halves the search space → O(log N).
Space Complexity
Only a few integer variables (low, high, mid, lowest, ind) → O(1).

Solution:

class Solution {
public:
    int findKRotation(vector<int> &nums)  {
        
        int lowest=INT_MAX;
        int ind=0;
        int low=0;
        int high=nums.size()-1;
        while(low<=high)
        {
            int mid=low+(high-low)/2;
            if(nums[low]<=nums[mid])
            {
                if(nums[low]<lowest)
                {
                    lowest=nums[low];
                    ind=low;
                }
                low=mid+1;
            }
            else{
                if(nums[mid]<lowest)
                {
                    lowest=nums[mid];
                     ind=mid;
                }
               
                high=mid-1;
            }
        }
        return ind;
    }
};
