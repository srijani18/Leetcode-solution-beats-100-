Problem Statement:
Implement pow(x, n), which calculates x raised to the power n (i.e., xn).

#Solution by Srijani Guha Ray

## üöÄ Approach

We use **Binary Exponentiation** (Exponentiation by Squaring) to compute x‚Åø efficiently.
Instead of multiplying `x` n times, we square `x` and halve `n` in each step.

### Steps:
1. Convert `n` to a positive long `nn` to handle overflow for INT_MIN.
2. If `nn` is odd, multiply `ans` by `x` and reduce `nn` by 1.
3. If `nn` is even, square `x` and halve `nn`.
4. If the original `n` was negative, take reciprocal of result.

### Complexity:
- **Time:** O(log n)
- **Space:** O(1)

class Solution {
public:
    double myPow(double x, int n) {
        long nn=n;
        if(nn<0)
            nn=-1*nn;
        double ans=1.0;
        while(nn>0)
        {
            if(nn%2!=0)
            {
                ans=ans*x;
                nn=nn-1;
            }
            else{
                x=x*x;
                nn=nn/2;
            }
        }
        if(n<0) ans=double(1.0)/(double)(ans);
        return ans;
    }
};
