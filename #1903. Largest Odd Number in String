Problem Statement- 1903. Largest Odd Number in String

You are given a string num, representing a large integer. Return the largest-valued odd integer (as a string) that is a non-empty substring of num, or an empty string "" if no odd integer exists.
A substring is a contiguous sequence of characters within a string.

#Solution by Srijani Guha Ray

Intuition
An odd number is determined by its last digit.
So, you just need to check from the rightmost side of the string for the first odd digit.
Once you find such a digit, the substring from the beginning to that index will form the largest odd number possible, because:
Removing digits from the end makes the number smaller.
Keeping as many leading digits as possible ensures the "largest" odd number.

Approach
Start scanning the string num from right to left.
For each character, check if it is an odd digit (digit % 2 != 0)
The first odd digit found determines the cut-off index.
Return the substring from 0 to that index.
If no odd digit exists, return "".
Complexity
Time complexity:
O(n)

Space complexity:
O(1)

Code
class Solution {
public:
    string largestOddNumber(string num) {
        
        int n=num.size();
        int i=n-1;
        int pos=-1;
        while(i>=0)
        {
            int rem = num[i]-'0';
            if(rem%2!=0)
            {
                pos=i;
                break;
            }
            i--;
        }
        if (pos>-1)
            return num.substr(0, i+1);
